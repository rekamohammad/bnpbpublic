{"version":3,"sources":["profile.js"],"names":[],"mappingsfile":"profile.js","sourcesContent":["/**\n * Created by Sang Nguyen on 06/09/2015.\n */\n\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else {\n        factory(jQuery);\n    }\n})(function ($) {\n\n    var console = window.console || {\n            log: $.noop\n        };\n\n    function CropAvatar($element) {\n        this.$container = $element;\n\n        this.$avatarView = this.$container.find('.avatar-view');\n        this.$avatar = this.$avatarView.find('img');\n        this.$avatarModal = this.$container.find('#avatar-modal');\n        this.$loading = this.$container.find('.loading');\n\n        this.$avatarForm = this.$avatarModal.find('.avatar-form');\n        this.$avatarUpload = this.$avatarForm.find('.avatar-upload');\n        this.$avatarSrc = this.$avatarForm.find('.avatar-src');\n        this.$avatarData = this.$avatarForm.find('.avatar-data');\n        this.$avatarInput = this.$avatarForm.find('.avatar-input');\n        this.$avatarSave = this.$avatarForm.find('.avatar-save');\n\n        this.$avatarWrapper = this.$avatarModal.find('.avatar-wrapper');\n        this.$avatarPreview = this.$avatarModal.find('.avatar-preview');\n\n        this.init();\n    }\n\n    CropAvatar.prototype = {\n        constructor: CropAvatar,\n\n        support: {\n            fileList: !!$('<input type=\"file\">').prop('files'),\n            fileReader: !!window.FileReader,\n            formData: !!window.FormData\n        },\n\n        init: function () {\n            this.support.datauri = this.support.fileList && this.support.fileReader;\n\n            if (!this.support.formData) {\n                this.initIframe();\n            }\n\n            this.initTooltip();\n            this.initModal();\n            this.addListener();\n        },\n\n        addListener: function () {\n            this.$avatarView.on('click', $.proxy(this.click, this));\n            this.$avatarInput.on('change', $.proxy(this.change, this));\n            this.$avatarForm.on('submit', $.proxy(this.submit, this));\n        },\n\n        initTooltip: function () {\n            this.$avatarView.tooltip({\n                placement: 'bottom'\n            });\n        },\n\n        initModal: function () {\n            this.$avatarModal.modal('hide');\n            this.initPreview();\n        },\n\n        initPreview: function () {\n            var url = this.$avatar.prop('src');\n\n            this.$avatarPreview.empty().html('<img src=\"' + url + '\">');\n        },\n\n        initIframe: function () {\n            var iframeName = 'avatar-iframe-' + Math.random().toString().replace('.', ''),\n                $iframe = $('<iframe name=\"' + iframeName + '\" style=\"display:none;\"></iframe>'),\n                firstLoad = true,\n                _this = this;\n\n            this.$iframe = $iframe;\n            this.$avatarForm.attr('target', iframeName).after($iframe);\n\n            this.$iframe.on('load', function () {\n                var data,\n                    win,\n                    doc;\n\n                try {\n                    win = this.contentWindow;\n                    doc = this.contentDocument;\n\n                    doc = doc ? doc : win.document;\n                    data = doc ? doc.body.innerText : null;\n                } catch (e) {\n                }\n\n                if (data) {\n                    _this.submitDone(data);\n                } else {\n                    if (firstLoad) {\n                        firstLoad = false;\n                    } else {\n                        _this.submitFail('Image upload failed!');\n                    }\n                }\n\n                _this.submitEnd();\n            });\n        },\n\n        click: function () {\n            this.$avatarModal.modal('show');\n        },\n\n        change: function () {\n            var files,\n                file;\n\n            if (this.support.datauri) {\n                files = this.$avatarInput.prop('files');\n\n                if (files.length > 0) {\n                    file = files[0];\n\n                    if (this.isImageFile(file)) {\n                        this.read(file);\n                    }\n                }\n            } else {\n                file = this.$avatarInput.val();\n\n                if (this.isImageFile(file)) {\n                    this.syncUpload();\n                }\n            }\n        },\n\n        submit: function () {\n            if (!this.$avatarSrc.val() && !this.$avatarInput.val()) {\n                Botble.showNotice('error', 'Please select image!', Botble.languages.notices_msg.error);\n                return false;\n            }\n\n            if (this.support.formData) {\n                this.ajaxUpload();\n                return false;\n            }\n        },\n\n        isImageFile: function (file) {\n            if (file.type) {\n                return /^image\\/\\w+$/.test(file.type);\n            } else {\n                return /\\.(jpg|jpeg|png|gif)$/.test(file);\n            }\n        },\n\n        read: function (file) {\n            var _this = this,\n                fileReader = new FileReader();\n\n            fileReader.readAsDataURL(file);\n\n            fileReader.onload = function () {\n                _this.url = this.result;\n                _this.startCropper();\n            };\n        },\n\n        startCropper: function () {\n            var _this = this;\n\n            if (this.active) {\n                this.$img.cropper('replace', this.url);\n            } else {\n                this.$img = $('<img src=\"' + this.url + '\">');\n                this.$avatarWrapper.empty().html(this.$img);\n                this.$img.cropper({\n                    aspectRatio: 1,\n                    rotatable: true,\n                    preview: this.$avatarPreview.selector,\n                    done: function (data) {\n                        var json = [\n                            '{\"x\":' + data.x,\n                            '\"y\":' + data.y,\n                            '\"height\":' + data.height,\n                            '\"width\":' + data.width + \"}\"\n                        ].join();\n\n                        _this.$avatarData.val(json);\n                    }\n                });\n\n                this.active = true;\n            }\n        },\n\n        stopCropper: function () {\n            if (this.active) {\n                this.$img.cropper('destroy');\n                this.$img.remove();\n                this.active = false;\n            }\n        },\n\n        ajaxUpload: function () {\n            var url = this.$avatarForm.attr('action'),\n                data = new FormData(this.$avatarForm[0]),\n                _this = this;\n\n            $.ajax(url, {\n                type: 'post',\n                data: data,\n                processData: false,\n                contentType: false,\n\n                beforeSend: function () {\n                    _this.submitStart();\n                },\n\n                success: function (data) {\n                    _this.submitDone(data);\n                },\n\n                error: function (XMLHttpRequest, textStatus, errorThrown) {\n                    console.log(XMLHttpRequest.responseJSON);\n                    _this.submitFail(XMLHttpRequest.responseJSON, textStatus || errorThrown);\n                },\n\n                complete: function () {\n                    _this.submitEnd();\n                }\n            });\n        },\n\n        syncUpload: function () {\n            this.$avatarSave.click();\n        },\n\n        submitStart: function () {\n            this.$loading.fadeIn();\n            this.$avatarSave.attr('disabled', true).text('Saving...');\n        },\n\n        submitDone: function (data) {\n\n            try {\n                data = $.parseJSON(data);\n            } catch (e) {\n            }\n\n            if (data && !data.error) {\n                if (data.result) {\n                    this.url = data.result;\n\n                    if (this.support.datauri || this.uploaded) {\n                        this.uploaded = false;\n                        this.cropDone();\n                    } else {\n                        this.uploaded = true;\n                        this.$avatarSrc.val(this.url);\n                        this.startCropper();\n                    }\n\n                    this.$avatarInput.val('');\n                    Botble.showNotice('success', data.message, Botble.languages.notices_msg.success);\n                } else {\n                    Botble.showNotice('error', data.message, Botble.languages.notices_msg.error);\n                }\n            } else {\n                Botble.showNotice('error', 'Failed to response', Botble.languages.notices_msg.error);\n            }\n        },\n\n        submitFail: function (errors) {\n            Botble.handleError(errors);\n        },\n\n        submitEnd: function () {\n            this.$loading.fadeOut();\n            this.$avatarSave.removeAttr('disabled').text('Save');\n        },\n\n        cropDone: function () {\n            this.$avatarSrc.val('');\n            this.$avatarData.val('');\n            this.$avatar.prop('src', this.url);\n            $('.user-menu img').prop('src', this.url);\n            $('.user.dropdown img').prop('src', this.url);\n            this.stopCropper();\n            this.initModal();\n        }\n    };\n\n    $(function () {\n        var cropavie = new CropAvatar($('.crop-avatar'));\n\n        var options = {};\n        options.ui = {\n            container: \"#pwd-container\",\n            verdicts: [\n                \"<span class='fa fa-exclamation-triangle'></span> Weak\",\n                \"<span class='fa fa-exclamation-triangle'></span> Normal\",\n                \"Medium\",\n                \"<span class='fa fa-thumbs-up'></span> Strong\",\n                \"<span class='fa fa-thumbs-up'></span> Very Strong\"],\n            showVerdictsInsideProgressBar: true,\n            viewports: {\n                progress: \".pwstrength_viewport_progress\"\n            }\n        };\n        options.common = {\n            debug: true,\n            onLoad: function () {\n                $('#messages').text('Start typing password');\n            }\n        };\n        $(':password').pwstrength(options);\n\n        $('.pwstrength_viewport_progress').hide();\n        $(':password').keypress(function () {\n            $('.pwstrength_viewport_progress').fadeIn();\n        }).blur(function () {\n            if ($(this).val() == '') {\n                $('.pwstrength_viewport_progress').hide();\n            }\n        });\n    });\n});\n"]}